---
alwaysApply: true
---
# CRITICAL: Documentation-First Approach

Core Development Philosophy
KISS (Keep It Simple, Stupid)
Simplicity should be a key goal in design. Choose straightforward solutions over complex ones whenever possible. Simple solutions are easier to understand, maintain, and debug.

YAGNI (You Aren't Gonna Need It)
Avoid building functionality on speculation. Implement features only when they are needed, not when you anticipate they might be useful in the future.

Design Principles
Dependency Inversion: High-level modules should not depend on low-level modules. Both should depend on abstractions.
Open/Closed Principle: Software entities should be open for extension but closed for modification.
Single Responsibility: Each function, class, and module should have one clear purpose.
Fail Fast: Check for potential errors early and raise exceptions immediately when issues occur.

üìù Documentation Standards
Code Documentation
Every module should have a docstring explaining its purpose
Public functions must have complete docstrings
Complex logic should have inline comments with # Reason: prefix
Keep README.md updated with setup instructions and examples
Maintain CHANGELOG.md for version history

‚ö†Ô∏è Important Notes
NEVER ASSUME OR GUESS - When in doubt, ask for clarification
Always verify file paths and module names before use
Keep CLAUDE.md updated when adding new patterns or dependencies
Test your code - No feature is complete without tests
Document your decisions - Future developers (including yourself) will thank you